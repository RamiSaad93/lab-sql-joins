# Write SQL queries to perform the following tasks using the Sakila database:

# 1. List the number of films per category.
# 2. Retrieve the store ID, city, and country for each store.
# 3. Calculate the total revenue generated by each store in dollars.
# 4. Determine the average running time of films for each category.

# 1. List the number of films per category.

SELECT c.name, COUNT(fc.film_id) AS number_of_films 
FROM film_category AS fc
INNER JOIN category AS c
USING(category_id)
GROUP BY category_id;

# 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c.city, co.country
FROM store AS s
INNER JOIN address 
USING(address_id)
INNER JOIN city AS C
USING(city_id)
INNER JOIN country AS co
USING(country_id);

# 3. Calculate the total revenue generated by each store in dollars.

SELECT s.store_id, SUM(p.amount) AS revenue
FROM payment AS p
INNER JOIN rental AS r
USING(rental_id)
INNER JOIN inventory AS i
USING(inventory_id)
INNER JOIN store AS s
USING(store_id)
GROUP BY s.store_id; 

# 4. Determine the average running time of films for each category.

SELECT c.name, AVG(f.length) AS avg_len
FROM film AS f
INNER JOIN film_category 
USING(film_id)
INNER JOIN category AS c
USING(category_id)
GROUP BY c.name;

# 5. Identify the film categories with the longest average running time.
# 6. Display the top 10 most frequently rented movies in descending order.
# 7. Determine if "Academy Dinosaur" can be rented from Store 1.
# 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
	# Include a column indicating whether each title is 'Available' or 'NOT available.' 
	# Note that there are 42 titles that are not in the inventory, 
    # and this information can be obtained using a CASE statement combined with IFNULL."

# 5. Identify the film categories with the longest average running time.

SELECT c.name, AVG(f.length) AS avg_len
FROM film AS f
INNER JOIN film_category 
USING(film_id)
INNER JOIN category AS c
USING(category_id)
GROUP BY c.name
ORDER BY avg_len DESC;

# 6. Display the top 10 most frequently rented movies in descending order.

SELECT title, SUM(rental_duration) AS RENTED
FROM film
GROUP BY title
ORDER BY rented DESC
LIMIT 10;

# 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT inventory.store_id, film.title
FROM film
INNER JOIN inventory
USING(film_id)
GROUP BY inventory.store_id
HAVING film.title = "Academy Dinosaur";

# 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
	# Include a column indicating whether each title is 'Available' or 'NOT available.' 
	# Note that there are 42 titles that are not in the inventory, 
    # and this information can be obtained using a CASE statement combined with IFNULL."
    
SELECT DISTINCT film.title, 
CASE 
        WHEN inventory.inventory_id IS NULL THEN 'Not Available'
        ELSE 'Available'
END AS Availability
FROM film 
LEFT JOIN inventory
USING(film_id);




